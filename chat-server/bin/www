#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("react-chat:server");
var http = require("http");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);  
const io = require("socket.io")(server, {
  cors: {
    origin: '*',
  }
});


io.on("connection", (socket) => {
  // let addedUser = false;
  // when the client emits 'new message', this listens and executes
  socket.on("new message", (data) => {
 
    // we tell the client to execute 'new message'
    socket.broadcast.emit("new message", {
    //  username: socket.username,
      message: data,
    });
  });

  // when the client emits 'add user', this listens and executes
  // socket.on("add user", (name) => {
  //   if (addedUser) return;

  //   // we store the username in the socket session for this client

  //   addedUser = true;
  //   socket.emit("login", {});
  //   // echo globally (all clients) that a person has connected
  //   socket.broadcast.emit("user joined", {
  //     // name: localStorage.getItem("name"),
  //   });
  // });

  // when the client emits 'typing', we broadcast it to others
  // socket.on("typing", () => {
  //   socket.broadcast.emit("typing", {
  //     // name: localStorage.getItem("name"),
  //   });
  // });

  // when the user disconnects.. perform this
  // socket.on("disconnect", () => {
  //   if (addedUser) {
     

  //     // echo globally that this client has left
  //     socket.broadcast.emit("user left", {
  //       // name: localStorage.getItem("name"),
      
  //     });
  //   }
  // });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}



